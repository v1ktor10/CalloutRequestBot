import asyncio

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import BOT_TOKEN, GKP_CHAT_ID
from source_code.form import Form

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

dp = Dispatcher(storage=MemoryStorage())

cancel_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
    resize_keyboard=True,
    one_time_keyboard=False
)


@dp.message(lambda message: message.text and message.text.lower() in {"‚ùå –æ—Ç–º–µ–Ω–∏—Ç—å", "/cancel"})
async def cancel_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(Command("start"))
async def cmd_start(message: Message):
    builder = InlineKeyboardBuilder()
    builder.button(text="üìù –°–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_request")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=builder.as_markup())


@dp.callback_query(lambda c: c.data == "create_request")
async def process_create_request(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("–§–ò–û –ë–í–ü (—É–∫–∞–∂–∏—Ç–µ –µ—Å–ª–∏ –±—ã–ª–∞ —Å–º–µ–Ω–∞ –§–ò–û):", reply_markup=cancel_kb)
    await state.set_state(Form.full_name)


@dp.message(Form.full_name)
async def step_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:", reply_markup=cancel_kb)
    await state.set_state(Form.birth_date)


@dp.message(Form.birth_date)
async def step_birth_date(message: Message, state: FSMContext):
    await state.update_data(birth_date=message.text)
    await message.answer("–î–∞—Ç–∞ –ø—Ä–æ–ø–∞–∂–∏:", reply_markup=cancel_kb)
    await state.set_state(Form.missing_date)


@dp.message(Form.missing_date)
async def step_missing_date(message: Message, state: FSMContext):
    await state.update_data(missing_date=message.text)
    await message.answer("–ú–µ—Å—Ç–æ –ø—Ä–æ–ø–∞–∂–∏:", reply_markup=cancel_kb)
    await state.set_state(Form.missing_place)


@dp.message(Form.missing_place)
async def step_missing_place(message: Message, state: FSMContext):
    await state.update_data(missing_place=message.text)
    await message.answer("–ú–æ—Ä–≥ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å, –∑–≤–æ–Ω–∏–º –∏–ª–∏ –Ω–µ—Ç):", reply_markup=cancel_kb)
    await state.set_state(Form.morgue)


@dp.message(Form.morgue)
async def step_morgue(message: Message, state: FSMContext):
    await state.update_data(morgue=message.text)
    await message.answer("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ (–Ω—É–∂–Ω—ã –ª–∏ –±–æ–ª—å–Ω–∏—Ü—ã –≤ –¥—Ä—É–≥–æ–º —Ä–∞–π–æ–Ω–µ?):", reply_markup=cancel_kb)
    await state.set_state(Form.additional)


@dp.message(Form.additional)
async def step_additional(message: Message, state: FSMContext):
    await state.update_data(additional=message.text)
    await message.answer("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ (–≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –ì–ö–ü):", reply_markup=cancel_kb)
    await state.set_state(Form.notes)


@dp.message(Form.notes)
async def step_notes(message: Message, state: FSMContext):
    await state.update_data(notes=message.text)

    # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = message.from_user.username
    suggested_username = f"@{username}" if username else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    await state.update_data(informer=suggested_username)

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å username
    builder = InlineKeyboardBuilder()
    builder.button(text=f"‚úÖ –î–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {suggested_username}", callback_data="use_username")
    builder.button(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="edit_username")

    await message.answer(
        f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à username –∫–∞–∫ –∏–Ω—Ñ–æ—Ä–≥–∞: <b>{suggested_username}</b>?",
        reply_markup=builder.as_markup()
    )
    await state.set_state(Form.informer)


@dp.callback_query(Form.informer, lambda c: c.data in {"use_username", "edit_username"})
async def handle_username_choice(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)

    if callback.data == "use_username":
        await callback.message.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:")
        return await finalize_form(callback.message, state)
    else:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–≥–∞ (—á–µ—Ä–µ–∑ @):")


@dp.message(Form.informer)
async def step_manual_informer(message: Message, state: FSMContext):
    await state.update_data(informer=message.text)
    await message.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:")
    await finalize_form(message, state)


async def finalize_form(message: Message, state: FSMContext):
    data = await state.get_data()

    summary = (
        f"<b>üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:</b>\n"
        f"<b>–§–ò–û –ë–í–ü:</b> {data['full_name']}\n"
        f"<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {data['birth_date']}\n"
        f"<b>–î–∞—Ç–∞ –ø—Ä–æ–ø–∞–∂–∏:</b> {data['missing_date']}\n"
        f"<b>–ú–µ—Å—Ç–æ –ø—Ä–æ–ø–∞–∂–∏:</b> {data['missing_place']}\n"
        f"<b>–ú–æ—Ä–≥:</b> {data['morgue']}\n"
        f"<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b> {data['additional']}\n"
        f"<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {data['notes']}\n"
        f"<b>–ò–Ω—Ñ–æ—Ä–≥:</b> {data['informer']}"
    )

    confirm_kb = InlineKeyboardBuilder()
    confirm_kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes")
    confirm_kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")

    await message.answer(summary, reply_markup=confirm_kb.as_markup())
    await state.set_state(Form.confirm)


@dp.callback_query(Form.confirm, lambda c: c.data in {"confirm_yes", "confirm_no"})
async def process_confirmation(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)

    if callback.data == "confirm_yes":
        data = await state.get_data()
        gkp_message = (
            f"<b>üìù –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n"
            f"<b>–§–ò–û –ë–í–ü:</b> {data['full_name']}\n"
            f"<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {data['birth_date']}\n"
            f"<b>–î–∞—Ç–∞ –ø—Ä–æ–ø–∞–∂–∏:</b> {data['missing_date']}\n"
            f"<b>–ú–µ—Å—Ç–æ –ø—Ä–æ–ø–∞–∂–∏:</b> {data['missing_place']}\n"
            f"<b>–ú–æ—Ä–≥:</b> {data['morgue']}\n"
            f"<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b> {data['additional']}\n"
            f"<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {data['notes']}\n"
            f"<b>–ò–Ω—Ñ–æ—Ä–≥:</b> {data['informer']}"
        )

        await bot.send_message(GKP_CHAT_ID, gkp_message)
        await callback.message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ì–ö–ü!", reply_markup=ReplyKeyboardRemove())
    else:
        await callback.message.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=ReplyKeyboardRemove())

    new_request_kb = InlineKeyboardBuilder()
    new_request_kb.button(text="üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", callback_data="create_request")
    await callback.message.answer("–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É?", reply_markup=new_request_kb.as_markup())
    await state.clear()


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

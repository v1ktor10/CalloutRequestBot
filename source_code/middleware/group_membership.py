from aiogram import Bot
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery
from typing import Callable, Dict, Any, Union, Iterable
from aiogram.exceptions import TelegramForbiddenError

class GroupMembershipMiddleware(BaseMiddleware):
    def __init__(self, group_chat_ids: Iterable[int], allowed_commands=None):
        if allowed_commands is None:
            allowed_commands = {None}
        self.group_chat_ids = set(group_chat_ids)
        self.allowed_commands = allowed_commands

    async def __call__(
        self,
        handler: Callable[[Union[Message, CallbackQuery], Dict[str, Any]], Any],
        event: Union[Message, CallbackQuery],
        data: Dict[str, Any]
    ) -> Any:
        user = event.from_user

        # –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–ª–µ–Ω—Å—Ç–≤–∞
        if isinstance(event, Message) and event.text in self.allowed_commands:
            return await handler(event, data)

        bot: Bot = data["bot"]
        for chat_id in self.group_chat_ids:
            try:
                member = await bot.get_chat_member(chat_id=chat_id, user_id=user.id)
                if member.status in {"member", "creator", "administrator"}:
                    return await handler(event, data)
            except TelegramForbiddenError:
                continue  # –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤, –Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Ç
            except Exception:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏

        await event.answer("üö´ –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –æ–¥–Ω–æ–π –∏–∑ –≥—Ä—É–ø–ø: –∏–Ω—Ñ–æ—Ä–≥–æ–≤ –∏–ª–∏ –ì–ö–ü.")
        return None

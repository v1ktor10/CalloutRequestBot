from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery
from typing import Callable, Dict, Any, Union
from aiogram.exceptions import TelegramForbiddenError

class GroupMembershipMiddleware(BaseMiddleware):
    def __init__(self, group_chat_id: int, allowed_commands=None):
        if allowed_commands is None:
            allowed_commands = {None}
        self.group_chat_id = group_chat_id
        self.allowed_commands = allowed_commands

    async def __call__(
        self,
        handler: Callable[[Union[Message, CallbackQuery], Dict[str, Any]], Any],
        event: Union[Message, CallbackQuery],
        data: Dict[str, Any]
    ) -> Any:
        user = event.from_user

        if isinstance(event, Message) and event.text in self.allowed_commands:
            return await handler(event, data)

        try:
            bot = data["bot"]
            member = await bot.get_chat_member(chat_id=self.group_chat_id, user_id=user.id)
            if member.status not in {"member", "creator", "administrator"}:
                await event.answer("üö´ –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã –∏–Ω—Ñ–æ—Ä–≥–æ–≤.")
                return
        except TelegramForbiddenError:
            await event.answer("üö´ –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –≥—Ä—É–ø–ø—ã.")
            return
        except Exception as e:
            await event.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø—ã: {e}")
            return

        return await handler(event, data)

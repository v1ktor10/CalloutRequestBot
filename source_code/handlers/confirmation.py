from aiogram import Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from source_code.config import GKP_CHAT_ID
from source_code.keyboards.inline import new_request_keyboard
from source_code.keyboards.reply import remove_kb
from source_code.states.form import Form
from source_code.utils.finalize import finalize_form

async def handle_username_choice(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    if callback.data == "use_username":
        await callback.message.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:")
        await finalize_form(callback.message, state)
    else:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–≥–∞ (—á–µ—Ä–µ–∑ @):")

async def process_confirmation(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    if callback.data == "confirm_yes":
        data = await state.get_data()
        message_text = (
            f"<b>üìù –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n"
            f"<b>–§–ò–û –ë–í–ü:</b> {data['full_name']}\n"
            f"<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {data['birth_date']}\n"
            f"<b>–î–∞—Ç–∞ –ø—Ä–æ–ø–∞–∂–∏:</b> {data['missing_date']}\n"
            f"<b>–ú–µ—Å—Ç–æ –ø—Ä–æ–ø–∞–∂–∏:</b> {data['missing_place']}\n"
            f"<b>–ú–æ—Ä–≥:</b> {data['morgue']}\n"
            f"<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b> {data['additional']}\n"
            f"<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {data['notes']}\n"
            f"<b>–ò–Ω—Ñ–æ—Ä–≥:</b> {data['informer']}"
        )
        await callback.bot.send_message(GKP_CHAT_ID, message_text)
        await callback.message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ì–ö–ü!", reply_markup=remove_kb)
    else:
        await callback.message.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=remove_kb)
    await callback.message.answer("–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É?", reply_markup=new_request_keyboard())
    await state.clear()

def register(dp: Dispatcher):
    dp.callback_query.register(handle_username_choice, Form.informer, lambda c: c.data in {"use_username", "edit_username"})
    dp.callback_query.register(process_confirmation, Form.confirm, lambda c: c.data in {"confirm_yes", "confirm_no"})
